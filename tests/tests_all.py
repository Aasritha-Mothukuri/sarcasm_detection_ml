# -*- coding: utf-8 -*-
"""tests_all.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gJnalnEujoG1NNO-xG9hgf200a75bI3v
"""

# Test Cell for Sarcasm Detection Functions

import re
from sklearn.linear_model import LogisticRegression
from sklearn.feature_extraction.text import TfidfVectorizer
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

# Assuming nltk downloads already done in your notebook
stop_words = set(stopwords.words('english'))
lemmatizer = WordNetLemmatizer()

def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-z\s]', '', text)
    words = text.split()
    words = [lemmatizer.lemmatize(word) for word in words if word not in stop_words]
    return ' '.join(words)

def predict_sarcasm(text, model, vectorizer):
    text_clean = clean_text(text)
    text_vec = vectorizer.transform([text_clean])
    prediction = model.predict(text_vec)
    return "Sarcastic" if prediction[0] == 1 else "Not Sarcastic"

def run_tests():
    print("Running tests...")

    # Test clean_text function
    cleaned = clean_text("Wow! This is AMAZING!!")
    assert "wow" in cleaned, "clean_text missing 'wow'"
    assert "this" not in cleaned, "'this' is a stopword and should be removed"
    assert "amazing" in cleaned, "'amazing' should remain"
    assert "!" not in cleaned, "punctuation should be removed"

    print("clean_text test passed.")

    # Test vectorizer shape
    sample_texts = ["I love this", "Horrible idea"]
    cleaned_texts = [clean_text(t) for t in sample_texts]
    vectorizer = TfidfVectorizer(max_features=10)
    X = vectorizer.fit_transform(cleaned_texts)
    assert X.shape[0] == 2, "TF-IDF vectorizer should have 2 rows"
    assert X.shape[1] <= 10, "TF-IDF vectorizer should have at most 10 features"

    print("TF-IDF vectorizer test passed.")

    # Train a simple Logistic Regression model on tiny data for prediction test
    labels = [0, 1]
    model = LogisticRegression(max_iter=1000)
    model.fit(X, labels)

    prediction = predict_sarcasm("Oh sure, this will work", model, vectorizer)
    assert prediction in ["Sarcastic", "Not Sarcastic"], "Prediction should be one of the two labels"

    print("predict_sarcasm test passed.")
    print("All tests passed!")

run_tests()